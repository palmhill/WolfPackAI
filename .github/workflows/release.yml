name: Release - Build and Create GitHub Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build publishable artifact
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      assembly_version: ${{ steps.version.outputs.assembly_version }}
      file_version: ${{ steps.version.outputs.file_version }}
      informational_version: ${{ steps.version.outputs.informational_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore
        run: dotnet restore WolfPackAI.AppHost/WolfPackAI.AppHost.csproj

      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          # Derive a numeric-only version for Assembly/File version (strip pre-release/build metadata)
          NUMERIC="${VERSION%%-*}"
          IFS='.' read -r A B C D <<< "$NUMERIC"
          A=${A:-0}; B=${B:-0}; C=${C:-0}; D=${D:-0}
          FILE_VER="$A.$B.$C.$D"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "ASSEMBLY_VERSION=$FILE_VER" >> $GITHUB_ENV
          echo "FILE_VERSION=$FILE_VER" >> $GITHUB_ENV
          echo "INFORMATIONAL_VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "assembly_version=$FILE_VER" >> $GITHUB_OUTPUT
          echo "file_version=$FILE_VER" >> $GITHUB_OUTPUT
          echo "informational_version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Build solution
        run: |
          dotnet build WolfPackAI.sln -c Release --nologo

      - name: Publish (framework-dependent)
        shell: bash
        run: |
          set -euo pipefail
          OUT_DIR="$GITHUB_WORKSPACE/out"
          mkdir -p "$OUT_DIR"
          echo "Publishing WolfPackAI.AppHost to $OUT_DIR (framework-dependent)"
          dotnet publish WolfPackAI.AppHost/WolfPackAI.AppHost.csproj \
            -c Release \
            -p:Version=$VERSION \
            -p:AssemblyVersion=$ASSEMBLY_VERSION \
            -p:FileVersion=$FILE_VERSION \
            -p:InformationalVersion=$INFORMATIONAL_VERSION \
            -p:ContinuousIntegrationBuild=true \
            -o "$OUT_DIR"
          echo "Publish completed. Contents of $OUT_DIR:"
          ls -la "$OUT_DIR" || true

      - name: Create archive
        shell: bash
        run: |
          set -euo pipefail
          OUT_DIR="$GITHUB_WORKSPACE/out"
          echo "Zipping from $OUT_DIR"
          if [ ! -d "$OUT_DIR" ] || [ -z "$(ls -A "$OUT_DIR")" ]; then
            echo "Publish output missing or empty: $OUT_DIR"; exit 1
          fi
          cd "$OUT_DIR"
          zip -r "$GITHUB_WORKSPACE/WolfPackAI.AppHost-${VERSION}.zip" .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: WolfPackAI.AppHost-${{ env.VERSION }}
          path: WolfPackAI.AppHost-${{ env.VERSION }}.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: WolfPackAI.AppHost-${{ needs.build.outputs.version }}
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: WolfPackAI.AppHost v${{ needs.build.outputs.version }}
          files: |
            artifacts/WolfPackAI.AppHost-${{ needs.build.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
